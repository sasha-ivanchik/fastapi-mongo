version: "3.9"
services:


  app:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    env_file:
      - .env
    container_name: app
    command: [ "/src/starter/app.sh" ]
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      auth:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/:/src/
    networks:
      - net


  mongo:
    image: mongo:latest
    container_name: mongo
    env_file:
      - .env
    ports:
      - "27017:27017"
    environment:
      - "MONGO_INITDB_DATABASE=${MONGO_DB}"
      - "MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}"
      - "MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}"
    command:
      mongod --quiet --logpath /dev/null
    networks:
      - net
    volumes:
      - ./volumes/data:/data/db
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s


  redis:
    image: redis:alpine
    hostname: redis
    container_name: redis
    restart: on-failure
    environment:
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
    ports:
      - '6379:6379'
    expose:
      - '6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    volumes:
      - ./volumes/cache:/data
    networks:
      - net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 2s
      retries: 10


  celery:
    container_name: celery
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    env_file:
      - .env
    command: celery -A utils.celery_worker:celery worker --loglevel=info --pool=solo
    depends_on:
      - app
      - redis
    networks:
      - net


  flower:
    container_name: flower
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    env_file:
      - .env
    command: celery -A utils.celery_worker:celery flower --port=5555 --loglevel=info
    ports:
      - "5555:5555"
    depends_on:
      - app
      - redis
      - celery
    networks:
      - net


  postgres:
    container_name: postgres
    image: postgres:14.2-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${AUTH_DB_PASS}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_DB: ${AUTH_DB_NAME}
      PGUSER: ${AUTH_DB_PGUSER}
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/auth-database:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-h", "${AUTH_DB_HOST}" ]
      interval: 1s
      timeout: 1s
      retries: 10
    networks:
      - net


  auth:
    build:
      context: ./
      dockerfile: ./authentication/Dockerfile
    env_file:
      - .env
    container_name: auth
    command: [ "/src/starter/app.sh" ]
    ports:
      - "8001:8001"
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./authentication/:/src/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/auth" ]
      interval: 1s
      timeout: 2s
      retries: 10
    networks:
      - net


  front:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
    env_file:
      - .env
    container_name: front
    ports:
      - "3000:3000"
    restart: on-failure
    depends_on:
      - app
      - auth
    networks:
      - net


  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
    restart: on-failure
    depends_on:
      - front
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf/
    networks:
      - net

networks:
  net:
    driver: bridge
